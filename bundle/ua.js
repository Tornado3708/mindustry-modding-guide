import list, { unknown } from "../bundle_general.js"

const newTable = (...content ) => `<table>${ content.join( "" ).toString() }</table>`
const newTHead = (...content ) => `<thead>${ content.join( "" ).toString() }</thead>`
const newTBody = (...content ) => `<tbody>${ content.join( "" ).toString() }</tbody>`
const newTH    = content => `<th>${ content }</th>`
const newTD    = content => `<td>${ content }</td>`

const newRowGen = func => ( ...values ) => {
  let content = ""
  values.forEach( value => { content += func( value ) } )
  return `<tr>${ content }</$tr>`
}
const newDesc = newRowGen( newTH ), newRow  = newRowGen( newTD )





const ua = Object.assign( {}, list )
  .abilities             .describe( "Масив зі здібностями (щит наприклад)." )
  .accel                 .describe( "Прискорення як частка від швидкості." )
  .aimDst                .describe( "Мінімальна дістанція, з якої може цілитись юніт ( для уникнення стрільби \"всередину\" юніта )." )
  .allowedInPayloads     .describe( "Чи може юніт переміщатись за допомогою вантажних конвеєрів." )
  .allowLegStep          .describe( "Чи може юніт-павук ходити поверх будівель." )
  .alwaysCreateOutline   .describe( "Чи буде отбводитись ходова база юніта. Зазвичай обводка відключається якщо я якоїсь зброї top = false." )
  .alwaysShootWhenMoving .describe( "Чи буде юніт постійно стріляти поки рухається незалежно від сповільнення." )
  .ammoCapacity          .describe( "Кількість снарядів, яку може мати юніт (якщо правило активне). 0 щоб визначити відносно швидкострільності зброї." )
  .ammoType              .describe( "Що використовує в якості снарядів юніт (якщо це правило активне)." )
  .armor                 .describe( "Отримані збитки будуть менші на цю величину." )
  .autoFindTarget        .describe( "Чи буде юніт в режимі командування самостійно цілитись та стріляти в ворожі цілі." )
  .baseLegStraightness   .describe( "Наскільки пряма база (місце появи) ніг ( 0 - кругла, 1 - пряма ). Вертикаль." )
  .baseRotateSpeed       .describe( "Швидкість повороту бази (тазу) меха. градус/с." )
  .boostMultiplier       .describe( "Збільшення швидкості в n разів під час прискорення." )
  .bounded               .describe( "Чи буде юніт відштовхуватися від країв карти." )
  .buildBeamOffset       .describe( "Візуальний відступ будівельного променю відносно переднього краю юніта." )
  .buildRange            .describe( "Дистанція для будування." )
  .buildSpeed            .describe( "Швидкість будування. Не будує якщо < 0." )
  // .buildTime             .describe(  )

  .canAttack             .describe( "Чи будуть в юніта бойові гармати." )
  .canBoost              .describe( "Чи може наземний юніт взлітати під час керування гравцем/процесором." )
  .canDrown              .describe( "Чи може юніт втонути." )
  .circleTarget          .describe( "Чи буде літаючий юніт кружляти навколо цілі." )
  .clipSize              .describe( "Розмір обрубки графіки. < 0 для автоматичного обчислення." )
  .crashDamageMultiplier .describe( "Множник для збитку, який завдає цей літаючий юніт при падінні" )
  .crawlSlowdown         .describe( "Множник швидкості, який цей юніт матиме коли буде crawlSlowdownFrac (коли переповзає блоки)." )
  .crawlSlowdownFrac     .describe( "Швидкість, нижче якої спрацює crawlSlowdown." )
  .createScorch          .describe( "Чи буде \"вигоряння\" (чорний слід) на місці падіння юніта." )
  .createWreck           .describe( "Чи буде падаючий \"труп\" юніта у випадку збиття." )
  .crushDamage           .describe( "Збиток, який наниситься блокам під танком/" )
  .commands              .describe( "Які команди можна подавати юніту." )
  .coreUnitDocking       .describe( "Чи буде з'являтись юніт ядра над цим юнітом при припиненні контролю." )
  .drag                  .describe( "Опір руху у вигляді частки." )
  .deathExplosionEffect  .describe( "Ефект, який відображається коли юніт вибухає." )
  .deathSound            .describe( "Назва звукового файлу, який буде звучати у випадку вибуху юніта." )
  .defaultCommand        .describe( "Команда для юніта за замовчуванням." )
  .drawBody              .describe( "Чи буде візуально відображатися юніт." )
  .drawBuildBeam         .describe( "Чи буде відображуватися будівельний промінь між юнітом та будівлею." )
  .drawCell              .describe( "Чи відображати над юнітом індикатор команди." )
  .drawItems             .describe( "Чи відображати підняті юнітом ресурси." )
  .drawMinimap           .describe( "Чи відображатиметься юніт на мінімапі." )
  .drawShields           .describe( "Чи відображати щити юніта." )
  .drownTimeMultiplier   .describe( "Множник для часу перед затопленням юніта: чим більше число, тим довше тоне." )
  .engineColor           .describe( "Колір всіх двигунів юніта." )
  .engineLayer           .describe( "Шар для відображення двигуна. < 0 за замовчуванням." )
  .engineOffset          .describe( "Змішення двигуна назад від центру юніта." )
  .engines               .describe( "Масив з двигунами(реактивними турбінами)." )
  .engineSize            .describe( "Основий радіус двигуна." )
  .fallSpeed             .describe( "Швидкість падіння наземного юніту після вимкнення режиму польоту." )
  .fallEffect            .describe( "Назва ефекту, який буде відображатись біля юніта під час падіння." )
  .fallEngineEffect      .describe( "Назва ефекту, який буде відображатись біля двигуна юніта під час падіння." )
  .faceTarget            .describe( "Чи повертатиметься корпус юніта в сторону ворога під час прицілювання/стрільби." )
  .flying                .describe( "Чи є юніт авіацією." )
  .fogRadius             .describe( "Радіус огляду в тумані в блоках. < 0 за замовчуванням." )
  .forceMultiTarget      .describe( "Чи може юніт цілитись гарматами в різні цілі (гармата з параметром mirror теж)." )
  .groundLayer           .describe( "Шар, на якому відображається юніт. Чим більше число, тим \"вище\" юніт." )
  .healColor             .describe( "Яким кольором буде блимати юніт під час \"лікування\"." )
  .healFlash             .describe( "Чи буде югіт блтмати під час \"лікування\"." )
  .health                .describe( "Здоров'я юніту." )
  .hidden                .describe( "Чи буде приховано юніт від бази даних." )
  .hittable              .describe( "Чи можуть юніта пробити кулі та вибухи." )
  .hitSize               .describe( "Розмір сторони квадратного хітбоксу." )
  .hovering              .describe( "Чи може наземний юніт літати над рідинами." )
  .hoverable             .describe( "Чи будуть відображатись дані про юніта при наведенні: здоров'я, щит тощо." )
  .innerEngineColor      .describe( "Колір внутрішнього кола двигуна." )
  .internal              .describe( "Чи призначений юніт для внітрішнього користування та не має згенерованого спрайту." )
  .isEnemy               .describe( "Чи буде вважатись юніт за бойову одиницю і потрапляти в лічильник ворогів в хвилі." )
  .itemCapacity          .describe( "Кількість ресурсу, яку може переносити юніт. < 0 задля того щоб вирахувати відносно розміру хітбокса." )
  .itemOffsetY           .describe( "Візуальний відступ підібраних ресурсів назад." )
  .immunities            .describe( "Масив з назвами ефектів, що будуть ігноруватися юнітом." )
  .killable              .describe( "Чи є юніт смертним." )
  .legCount              .describe( "Кількість ніг юніта-павука." )
  .legForwardScl         .describe( "Масштаб того, як далеко наперед переноситься нога(відносно швидкості). Якщо ноги відстають від юніта, слід корегувати цей параметр." )
  .legGroupSize          .describe( "Розмір групи ніг, які будуть рухатись синхронно." )
  .legLength             .describe( "Повна довжина обох фаланг ноги юніта-павука." )
  .legPhysicsLayer       .describe( "Чи буде юніт-павук взаємодіяти на окремому рівні висоти: інакше він взаємодіє на рівні groundLayer (60)." )
  .legSpeed              .describe( "Швидкість руху ноги юніта-павука до нового місцезнаходження." )
  .legStraightness       .describe( "Наскільки пряма база (місце появи) ніг ( 0 - кругла, 1 - пряма ). Горизонталь." )
  .lightColor            .describe( "Колір світла, який випромінює юніт при відсутності світла." )
  .lightOpacity          .describe( "Прозорість випромінюваного світла." )
  .lightRadius           .describe( "Радіус випромінюваного світла. Для значення за замовчуванням < 0." )
  .logicControllable     .describe( "Чи можна керувати юнітом за допомогою процесора." )
  .loopSound             .describe( "Який звук буде постійно лунати біля юніта." )
  .loopSoundVolume       .describe( "Гучність звуку, що лунає від юніта." )
  .lowAltitude           .describe( "Чи буде юніт відображатись на висоті, нижче ніж снаряди чи ефекти. Лише візуальний параметр." )
  .maxRange              .describe( "Максимальний діапазон гармат." )
  .mineFloor             .describe( "Чи може юніт добувати руду на рівні підлоги." )
  .mineHardnessScaling   .describe( "---------------------------------------" )
  .mineRange             .describe( "Радіус для добування ресурсів." )
  .mineSound             .describe( "Звук, який звучить під час добування руди." )
  .mineSoundVolume       .describe( "Гучність звуку, який звучить від час добування руди." )
  .mineItems             .describe( "Предмети, які буде шукати ШІ для добування." )
  .mineSpeed             .describe( "Швидкість видобутку руд." )
  .mineTier              .describe( "Руду якої твердості може копати юніт. < 0 щоб не було змоги." )
  .mineWalls             .describe( "Чи може юніт добувати руди зі стін." )
  .missileAccelTime      .describe( "Кількість ігрових тіків, впродовж яких цей юніт-ракета досягне максимальної швидкості руху." )
  .naval                 .describe( "Чи є юнітом-кораблем." )
  .omniMovement          .describe( "Чи може юніт змінювати напрямок руху без повороту корпусу." )
  .outlineColor          .describe( "Колір обводки, що генерується навколо спрайтів." )
  .outlineRadius         .describe( "Ширина обводки спрайтів юніта." )
  .outlines              .describe( "Чи треба генерувати обводку деталей юніта." )
  .parts                 .describe( "Додаткові (в основному анімовані) візуальні деталі юніта." )
  .payloadCapacity       .describe( "Як багато блоків/юнітів юніт може підібрати (в блоках<sup>2</sup>)." )
  .physics               .describe( "Чи буде юніт штовхатись з іншими юнітами." )
  .pickupUnits           .describe( "Чи може цей юніт переносити предмети/юнітів." )
  .playerControllable    .describe( "Чи може гравець власноруч контролювати юніта." )
  .range                 .describe( "Мінімальний діапазон, з якого починає вести стрільбу зброя. Можна змінювати за значення > 0." )
  .researchCostMultiplier.describe( "Множник вартості дослідження в дереві технологій." )
  .rippleScale           .describe( "Розмір бризг/хмар пилу від кожного кроку." )
  .riseSpeed             .describe( "Ріст швидкості під час взлету у вигляді частки." )
  .rotateMoveFirst       .describe( "Чи буде юніт спершу розвертатись на місці, а потім починати рух."  )
  .rotateSpeed           .describe( "Швидкість повороту корпусу в градусах/с." )
  .rotateToBuilding      .describe( "Чи повертається юніт передом до будівлі, яку будує." )
  .segmentPhase          .describe( "Як швидко сегмент повертається вслід за попереднім." )
  .segmentMaxRot         .describe( "Множник синусу відступу між сегментами, під впливом індексу сигменту." )
  .segmentRotSpeed       .describe( "Максимальна різниця кута між сусідніми сегментами." )
  .segments              .describe( "Кількість окремих сегментів." )
  .segmentScl            .describe( "Масштаб для синусу відступу між сегментами." )
  .shadowElevation       .describe( "Висота тіні наземного юніта. Візуальна характеристика." )
  .shadowElevationScl    .describe( "Масштабування висоти тіні юніта." )
  .singleTarget          .describe( "Чи будуть всі гармати юніта цілитись в одну ціль." )
  .speed                 .describe( "Швидкість юніта в блоках/с." )
  .stepShake             .describe( "Тряска від кожного кроку павука/меха." )
  .strafePenalty         .describe( "Штраф для швидкості юніта у вигляді частки, якщо він змінив напрямок руху на притилежний."  )
  .squareShape           .describe( "Чи буде юніт мати квадратну тінь." )
  .targetable            .describe( "Чи будуть вороги цілитись в юніта." )
  .targetAir             .describe( "Чи може юніт стріляти по авіації." )
  .targetFlags           .describe( "Список типів будівель, які є пріорітетними для цього юніта." )
  .targetGround          .describe( "Чи може юніт стріляти по наземним цілям." )
  .targetPriority        .describe( "(WIP) Юніти нижчого пріоритету будуть ігноруватись за наявності юнітів з більшим пріорітетом, не зважаючи на відстань." )
  .trailColor            .describe( "Колір сліду від двигуна/хвиль." )
  .trailLength           .describe( "Довжина сліду двигуна (авіація) або бризг (флот)." )
  .trailScale            .describe( "Масштаб всіх слідів (працює і з морськими юнітами)." )
  .type                  .describe( newTable( newTHead( newDesc( "Значення", "Опис" ) ), newTBody( newRow( "legs", "Юніт-павук." ), newRow( "mech", "Юніт-мех." ), newRow( "missile", "Юніт-ракета." ), newRow( "crawl", ("Юніт-личинка." ) ) ) ) )
  .useEngineElevation    .describe( "Чи будуть двигуни відображатися різного розміру, залежно від висоти." )
  .useUnitCap            .describe( "Чи буде обмежено кількість юнітів цього типу." )
  .vulnerableWithPayloads.describe( "if true, this unit can be hit/targeted when it has payloads (assuming hittable/targetable is false)." )
  .waveTrailX            .describe( "Горизонтальний відступ водяного сліду водного юніта." )
  .waveTrailY            .describe( "Вертикальний відступ водяного сліду водного юніта." )
  .weapons               .describe( "Масив з об'єктами з параметрами для гармат (Таблиця Weapons)." )



export default ua